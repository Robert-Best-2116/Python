

Normalization

    What is normalization? Database ?normaliazaiton is simply a convention for splitting large tables of data into smaller seperate tables with the primary goal being not to repeate data, why is this so important? compare it to a watch, we have it to check the time, but would wearing eight watches make it easer? no in the same sense having eight conflicing accounts of what the proper time is, and if we want t oupdate it wed have to do it for eery watch independeently, 

    in comparason for database design if we want to store a users email address wed want to store itin one place so its easy to find by usuing the ID the id will never change, so even if we update the users email address none of the other connections we defined in our database will be damaged,

    There are three main ruels of database normalazation you should use thease as a guide for desiging your ERDS remember however that they are common convetnion and not ruels, yo ucan take normlaiaation to an extreem like anything for example, a simple address field, one state can have many cities, one city can have many streets, one street can have many buildings one building can have many aparements one apparment can have many residents and so on and the bullshit never ends,


First Form 

    Each Column in your table can only have 1 value
        You should not have an addres column in your table that lists the address city state and zip al lseperated by commands
    

Second Form

    Each column in your table that is not a key primary or foreign must have unique values
        If you have a moies table with categeories column you should not have a catergory listed more than once

Third Form 

    You cannot have a non-key column column that is dependent on another non-key column
        you have a books table with columns publusher name and publisher addres s the address and name should be sperated in to a sepereate table and linked to books with a foreign key the publisher address is dependent on the publisher name and neither colum nis a key column. 



Conventions

    We will be following a set of convetions to create our database we dont have to follow thease convetions but we reccomend our studeents tofollow them for the following reasons

        Developers can have a better understanding of your database if you are usuing a set of industry standards 

        Developers can create software to automate alot of the quires if some assumptions can be made, in late rchapters you will learn about object relational mappers (orm) which are programs that other developers use to make database quieries easer by providing some handy functions, theaes functions will only work if we have followed the convetions that ORM autor expecets which are pirmalry based on set industry standards


    Guidelines

        down the line oyu may find yourself working with a company that has set their database convetions a little bit differently but theas eare the guidlines that we feeel are best for this course

            1.Make the table name plural and all lowercase- make it all plural, ex uesrs leads sites clients chapters coruses modules
            2.use ID as the primary key-name it ID also make it auto incremeted
            3.Name foreign keys with Singluar_Table_Name_Id- when referencing to a primary key in another table name (singluar name of hte table your refering to_id) ex user_id, lead_id site_id client_id chapter_id course_id module_id
            4.use created_at and updated_at as columns for the timestamp in every table you create 

        When we do things in orm it becomes extreemly important that we follow thease naming conventions. 



Data Types

    Simple Data Types

        (there are others but hteaes are the ones that we wil lbe usuing most of the time)
        
        VARCHAR (Number of Characaters)
            used to store strings of characters as non numeric  values that can be up to 255 charaacters it is  called VARCHAR because it ca nstore a variable number of charaacters and will only use the space required for each record that is tored in the dtabase, bar char should be uesd for values with diffrent charaacater lenghtis like na emial first name or last name

        Char(number of charaacaters) 
            Also used to store characaters as nonnumeric valiues howeever it will use up all space for the set number of characaters regardless fof what  value is added for example if i set char 15 and i try to store the value coding it will use up the equalvilent of 15 charaaters even tough coding is only six characaters long, car is good to use for things that wil lawlays be a given number of charaaters char would work well for something like a state abbreviaton

        Int
            1. Used to store integers
            2. The columns that you will find usuing int the most are things like unique idenefiers for each table, the majorty of rows i na table will not exceeded 2.1 billion records, INT is good to ues for most normal number values like a phone number or zip code
            3. unsigned postitive numbers only can store numerical values from 0 up to a huge fucking number. 4294967295
            4. signed positive and negative numbers can store numerical values from -2147483648 up to 2147483647

        Bigint
            1 big int would be used for columns that would need to store huge numbers, in most cases youd never need big int but if you wanted to store something like a facebook id when usuing facebooks api since they have over a billion users the id will neeed to be a datatype of bigint, 
            2 unsigned postotive numbers only, same as before just a bigger valuesigned postitive and negavtive numbers same as previous just bigger numbers

        TinyInt
            Tiny int would be good to use for numbers that will be relativeley small, a good example of something that would use a tiny int is a user lever identifer, (0-inactive user, 1- active user, 9 admin )
            unsigned can store numbers from 0 to 255
            signed can store numbers from -128 to 127

        Float
            used to store floating point numbers numbers that need to have decimnal places, an example would be an item constantly
        
        Text
            used to store a large amount of text like a description message or comment. used this for any text that var char() is to small to handle, delteate hte () when your using it
        
        Datetime
            Used for time-stamp like created_at nd updated_at or to store a datand time in the format yyyy-mm-dd hh:mm:ss

        DatetimeUsed for storing general dates in the format yyyy-mm-dd for example a birthdate

        
