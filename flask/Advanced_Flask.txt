Static Files
    Static Content is any content that can be served up to the client without being modified, generated or prccesesd by the server. Everyframe work will have its own way of servign static content, flask serves static content from a directory caleld static, much like our templates directory, the static directory must be called static, this st atic folder will be used to serve all of your stylesheets images and javascript Files

    now say we place a CSS file a Javascript file and an image file directley into our static folder, we can tehn accesst them in our HTML templates, like so


    <!-- linking a css style sheet -->
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='my_style.css') }}">
    <!-- linking a javascript file -->
    <script type="text/javascript" src="{{ url_for('static', filename='my_script.js') }}"></script>
    <!-- linking an image -->
    <img src="{{ url_for('static', filename='my_img.png') }}">

        This format is for placing all three files directely into the static file, without nesting them in their own folders.

    We place thease link into the same location we would normally place the style sheet information for the CSS

Organization
    It is common to create a few more folders to organize our static file sinto categories according to document type. we can call them CSS JS and IMG and houes the correspoinding files in the diffrent folders. We can reflect thease chagnes in our previous tags, with the following changes in the href/src attributes, notice the way we change the file name in the URL_for function

        <!-- linking a css style sheet -->
        <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/my_style.css') }}">
        <!-- linking a javascript file -->
        <script type="text/javascript" src="{{ url_for('static', filename='js/my_script.js') }}"></script>
        <!-- linking an image -->
        <img src="{{ url_for('static', filename='img/my_img.png') }}">

            This style sheet is for sheets that are nested inside of the static folder inside of their own folders. 


    -Note- when usuing the static files, your browser will likely cache them, if you are making chagnes in static files and teh dont appear to be updating, do a hard refresh of the page in your browser, by pressing CTRL + Shift, + R 

    

Rendering Templates 

    Passing lits to Jinja
        
        so far we have just passed simple variables to our template, if we were to pass this list on our server.py to our html remplate, it would look something like this. 

            @app.route('/lists')
            def render_lists():
                # Soon enough, we'll get data from a database, but for now, we're hard coding data
                student_info = [
                {'name' : 'Michael', 'age' : 35},
                {'name' : 'John', 'age' : 30 },
                {'name' : 'Mark', 'age' : 25},
                {'name' : 'KB', 'age' : 27}
                ]
                return render_template("lists.html", random_numbers = [3,1,5], students = student_info)


        our html would look like this

            <h1>Random Numbers</h1>
            {% for number in random_numbers %}
                <p>{{ number }}</p>
            {% endfor %}
            <h1>Students</h1>
            {% for student in students %}
                <p>{{ student['name'] }} - {{ student['age'] }}</p>
            {% endfor %}



Post Form Submission

    Up to this point we have been working with requests that display information from the server to the user. What if the reqest involves the client sending information to the server, the modern internet is user driven, much of the actuall content of a webstie is generated by the users ofa website, how does a user provide content to a website?? one word: forms, HTML forms are the way in which users are able to pass data to the back end of a webstie wehre the data then can be proccesed and stored, proccesing form data correctley is a huge part of what it takes to become a back end developer. 

    1. When creating a post request. the first thing we need to do is write a function that will show a page with a form on it

    2. next we will need to create our HTML index page that has a form on it. so that we have something to pass to our server this will also need to have the post function in the html method, without it its just a get request and will not have a secure connection

        The Critical Elements of this form are as follows
            
            Action Atribute-this is the route that will proccess the form ( not the one that shows the form) thats what well set up with '/

        Method Atribute 

            Our options are GET and POSt most likley we well want this to be a POST request, but if you dont set it the default is GET

        Input Elements

            Thease are parts of the form that actually gather data from the user, there are multiple options for the type that we will be usuing

                Documentation on types of forms 
                    https://www.w3schools.com/tags/att_input_type.asp

                Documentation for other form elements and text areas. note each element should have a unique value for its name atttribute. 
                    https://www.w3schools.com/html/html_form_elements.asp

        
        A way to submit the form

            This can either be <input type ="submit"> or <button>Submit</button> but Not <input type ='button'

    3. Finnaly lets determine what shoudl happen when the form is actually submited. we indicated above with the with the action attrubte that this post request woudl be handled with the route /users, so lets add thsi to ourserver. 

        Specifying allowed methods: methods=['POST']
            if we dont provide a value for methods we only gET requesta rea llowed everything wevre done up this point have been get erquestso it has been okay, but since we want this method to handle POST reuqest we must speicify that, notice it is a list. its possible to provide more than one value

        Accessing Data: request.form['name_of_input']
            The name we gave to each HTML input was significant on the server side we can access data that we as input into a field from a user throgh the rest.form dcitonary by providing the name of the input as the key, to see whats in your equest object try printing reqest.form

            -Note_ that the type of anything that comes in through rest.form will be a :string: no matter what, if you want that value to be identifed as an actuall number youl have to type cast it 


Redirecting

    As Developers we shoudl never nreder a tempalte on a POST reuqest. if we do then it oculd ressult in some disasterious consequesnces, 
    
        Duplicaton of Data in your applicaotn
        Over-charing creit cards (if proccesing payments)

    So what can we do instead? when we have finisehd proccessing the POST data we can perform a get reuest on behalf of the client, which will now be the rest thatis completed and should the client refresh the page, this is called redirecting, alllllways redirect after handling post data to avoid data being handeled more than once 

    If you havent done this when you refresh the page that has post data, you will get a warning that says that you are abotu to submit the data again, the warning explains that we are sending the same form data to be proccesed again, while its not a big deal at the moment imaigne our method was insertinga user into the database, clicking continue would ad that user to the DATABASE again, that would be no good 

    Lets adda seperate method that will be soley responiceible for redingin the show page, and then change the last line of our method handeling the post data from render_tempalte to redirect to the route that will reder the page. 

        return redirect("/show")

    Now when we submit a form and hit refresh weno longer recieve the warning. now however weve run into a new problem, the form data is empty, its because the data hasent perssited accrost mutliple requests. 


Session

    Back in algoriths and the python fundamentals chapter, when we had several functions in the same file, they dident know anything about one anotehr, they were all independent, This is no diffrent, each method that is handeling a route dosent konw anything about any of the other toutes

    The ething about the HTTP request/resonce cycle, it is statless, that means that each request/responce cycle is independent and ignorant of all other requests. before or after, Because we made a second reuqest by redirecting after the client posted data in the form, the browser only knows how the second request we made, because the form data was part of the first reqest, the second reqest has no access to it

    Sites solve this issue of igorance by usuing persistant data storage one form of persistance is called session 


    What is Session??

        With session we can establish a relationship with the client by saving or writing, certain valuable pieces of data for use in future cycles, and by reading that data weve stored in previous cycles, This opens up a world of user experience, with sessions the user can have a conversation of sorts with the sebsite, where a user makes a decision that can be tracked so the server can createa more cohesive user experirence

        In a given proccess (http request/responce) we can manage data, search terms and serch results for instance, that outlives the proccess that geneerated it. this data is called state, state allows our site to know alot of useful information such as

            Whether there is a user logged in
            who the current user is 
            What links a user has viewd previously 

        we get to decide what to save about our clients--session is a tool for us, as devlopers to use to our advantage, in the same ways we create variables in our functions to help us solve problems we keep state data in sesesion to help us solve problems from down the line ie in subsequent HTTP request

        Persistent data storage helps us bridge the gap between a stateless protocol like HTTP with the stateful data genrated through it. This is at the heart of the modern web and is heavily used by web develpers around the world. 

        Very shortly well also discuss databases as anotehr tool for persistant data storage, when we start incorporting a database into our projects, well consider what distitnt roles in each of thease tools serve. we should not abuse the amount of information we store in the session, store only what you need, once we incorporate a database we should be limited what we store in session 

    A Note On Cookies

        Youve Probablery heard of the term cookies before, some frameworks including Flask use cookies to store session data, Flask uses secure hashings of session data to send a packet of information from server to client, this packet is known as a cookie, once a clients browser has recieved ths cookie it writes the information contained in it to a small file on their hard drive, while hashed cookies are not inclidiblery secure so dont save anything private in them 

    
    Setting up session in flask

        form_test/server.py
            from flask import Flask, render_templates, request, redirect, session

            we are also required to provide a secret key in our sessions in flask. 

                Documentation on secret keys

                https://flask.palletsprojects.com/en/2.1.x/config/#SECRET_KEY


        form_test/server.py
            app = Flask(__name__)
            app.secret_key = "secret_key_name"

            because the create user method is the method in which we recieve the information from the post request lets write the information to session in this method

        
        form_test/server.py
            @app.route('/users', methods =['POST'])
            def create_users():
                print("Got Post Info") 
                # here we will add the two properties to session to store the name and email
                session['username'] = request.form['name']
                session['useremail'] = request.form['email']
                return redirect('/show')

            
            Previously in our show_user function we dident have any access to the name and emial from the form submission now because of session we have a way to access the name and email in a diffrent function

            now to modifly our show_user function:

        

        form_test/server.py
            @approute('/show')
            def show_user():
                return render_tempalte('show.html', name_on_template=session['username'], email_on_template=session['useremail']) 

        
Session in Templates 

    Right now we are passing the information stored in sessoin to the tempaltes usuing named arugments, session data is also aavaliable direcitely into our templates that means we can do this

        form_test/server.py
            @app.route('/show')
            deff show_user():
                return render_template('show.html')

        form_test/templates/show.html
            <h1>User:</h1>
            <h3>{{session['username']}}</h3>
            <h3>{{session['useremail']}}</h3>




Hidden Inputs

    Hidden input fields are form fields that are hidden from the user. hidden input is used along with other input elements to gransfer information between diffrent pages, A hidden input is just an ordinary input element, but has no visual representation in the rendered HTML 

        <input type="hidden" name="action" value="register">

    There are multipl ways we can make use of the hidden input field, in thsi tab we are going to look at just one example, suppose we have two forms within our index page. 

        <form method="post" action="/process">
            <input type="hidden" name="which_form" value="register">
            <input type="text" name="first_name">
            <input type="text" name="last_name">
            <input type="text" name="email">
            <input type="password" name="password">
            <input type="submit" value="Register">
        </form>
        <form method="post" action="/process">
            <input type="hidden" name="which_form" value="login">
            <input type="text" name="email">
            <input type="password" name="password">
            <input type="submit" value="Login">
        </form>

    

    Notice that both forms submit there data to the POST /proccess route. how will we know which form was submmited, each of the forms also has a hidden input with the same name, but diffrent values. in this example we are usuing the name "which form"

    in the POST/Proccess route, we could do something like this to proccess appropreatley depending on which for mwas subbmitted

        if request.form['which_form'] == 'register'
            //do registration proccess
        elif request.form['which_form'] == 'login'
            //do login proccess

    
    But know that even though hidden inputs are invisible to the user it is actually very visible in the pages source, that means that other users can still see and change the values you set in the hidden input. so be very careful in hoosing what data you store in there as value and set approriate actions if a user tries to change or remove it. 
